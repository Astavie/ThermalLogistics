buildscript {
		repositories {
				jcenter()
				maven { url = "http://files.minecraftforge.net/maven" }
		}
		dependencies {
				classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		}
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

ext.configFile = file ('gradle.properties')
ext.config = parseConfig(configFile)

version = "${mod_version}-${mod_build}"
group = "astavie.${mod_id}"
archivesBaseName = mod_id

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
	sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
	version = "${mc_version}-${forge_version}"
	runDir = "run"

	replace '${version}', project.version

	mappings = project.mappings_version
}

repositories {
	maven { url "http://maven.covers1624.net/" }
	maven { url "http://dvs1.progwml6.com/files/maven/" }
	maven { url "http://maven.k-4u.nl" }
}

dependencies {
	// Dependencies
	deobfCompile "cofh:RedstoneFlux:1.12+:universal@jar"
	deobfCompile "cofh:CoFHCore:${mc_version}+:universal@jar"
	deobfCompile "codechicken:CodeChickenLib:${mc_version}+:universal@jar"
	deobfCompile "cofh:ThermalFoundation:${mc_version}+:universal@jar"
	deobfCompile "cofh:ThermalDynamics:${mc_version}+:universal@jar"

	// Mod Compatibility
	deobfCompile "cofh:ThermalExpansion:${mc_version}+:universal@jar"
	deobfCompile "mezz.jei:jei_${mc_version}:+@jar"

	// Runtime
	runtime "cofh:CoFHWorld:${mc_version}+:universal@jar"
	runtime "cofh:ThermalCultivation:${mc_version}+:universal@jar"
	runtime "cofh:ThermalInnovation:${mc_version}+:universal@jar"

	runtime "com.github.mcjty:mcjtylib:1.12+@jar"
	runtime "com.github.mcjty:rftools:1.12+@jar"
}

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	from(sourceSets.main.resources.srcDirs) {
		include '**/*.info'
		include '**/*.properties'

		expand ([
			'version': project.version,
			'mcversion': mc_version,
        	'modid': mod_id,
        	'name': mod_name
		])
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude '**/*.info'
		exclude '**/*.properties'
	}
}

jar {
    manifest {
        attributes 'FMLAT': "logistics_at.cfg"
    }
    finalizedBy reobfJar
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes 'FMLAT': "logistics_at.cfg"
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId "astavie"
            artifactId mod_id
            version project.version

            artifact jar
            artifact deobfJar
            artifact sourcesJar
        }
    }
}

publishing {
    repositories {
        maven {
            url "/media/astavie/External SSD/Code/Github Pages/Maven"
        }
    }
}

task pushMaven(type: Exec) {
    workingDir '/media/astavie/External SSD/Code/Github Pages/Maven'
    commandLine 'bash', 'push.sh', "astavie/${mod_id}", "Maven, ${mod_name}, ${project.version}"
}

task incrementBuild {
	doLast {
		config.mod_build = config.mod_build.toString().toInteger() + 1
		configFile.withWriter {
			config.toProperties().store(it, "")
		}
	}
}

static def parseConfig(File config) {
	config.withReader {
		def prop = new Properties()
		prop.load(it)
		return new ConfigSlurper().parse(prop)
	}
}

publish.dependsOn incrementBuild
pushMaven.dependsOn publish

defaultTasks 'clean', 'build'
